
PT_RF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002da4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002f2c  08002f2c  00003f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f5c  08002f5c  000040ac  2**0
                  CONTENTS
  4 .ARM          00000000  08002f5c  08002f5c  000040ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f5c  08002f5c  000040ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f5c  08002f5c  00003f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f60  08002f60  00003f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08002f64  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000040ac  2**0
                  CONTENTS
 10 .bss          000000c4  200000ac  200000ac  000040ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000170  20000170  000040ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a94a  00000000  00000000  000040dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c64  00000000  00000000  0000ea26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  00010690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c1  00000000  00000000  000111f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a51e  00000000  00000000  00011ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d08c  00000000  00000000  0002bfd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009de5d  00000000  00000000  00039063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d6ec0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f7c  00000000  00000000  000d6f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000d9e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ac 	.word	0x200000ac
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f14 	.word	0x08002f14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b0 	.word	0x200000b0
 80001c4:	08002f14 	.word	0x08002f14

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa62 	bl	8000694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f83a 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f916 	bl	8000404 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f8ee 	bl	80003b8 <MX_DMA_Init>
  MX_DAC1_Init();
 80001dc:	f000 f876 	bl	80002cc <MX_DAC1_Init>
  MX_TIM2_Init();
 80001e0:	f000 f89e 	bl	8000320 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  send_wave();
 80001e4:	f000 f802 	bl	80001ec <send_wave>
  {
 80001e8:	bf00      	nop
 80001ea:	e7fb      	b.n	80001e4 <main+0x1c>

080001ec <send_wave>:

	}

/* function void SendPulse*/
 void send_wave()
 {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af02      	add	r7, sp, #8
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)Wave_LUT, NS, DAC_ALIGN_12B_R);
 80001f2:	2300      	movs	r3, #0
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	2327      	movs	r3, #39	@ 0x27
 80001f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000238 <send_wave+0x4c>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	480f      	ldr	r0, [pc, #60]	@ (800023c <send_wave+0x50>)
 80001fe:	f000 fc25 	bl	8000a4c <HAL_DAC_Start_DMA>
 HAL_TIM_Base_Start(&htim2);
 8000202:	480f      	ldr	r0, [pc, #60]	@ (8000240 <send_wave+0x54>)
 8000204:	f002 fb7e 	bl	8002904 <HAL_TIM_Base_Start>
 HAL_Delay(Delay);
 8000208:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <send_wave+0x58>)
 800020a:	edd3 7a00 	vldr	s15, [r3]
 800020e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000212:	ee17 0a90 	vmov	r0, s15
 8000216:	f000 faa3 	bl	8000760 <HAL_Delay>
 HAL_TIM_Base_Stop_DMA(&htim2);
 800021a:	4809      	ldr	r0, [pc, #36]	@ (8000240 <send_wave+0x54>)
 800021c:	f002 fbc6 	bl	80029ac <HAL_TIM_Base_Stop_DMA>
 HAL_Delay(Delay);
 8000220:	4b08      	ldr	r3, [pc, #32]	@ (8000244 <send_wave+0x58>)
 8000222:	edd3 7a00 	vldr	s15, [r3]
 8000226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800022a:	ee17 0a90 	vmov	r0, s15
 800022e:	f000 fa97 	bl	8000760 <HAL_Delay>
 }
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	20000000 	.word	0x20000000
 800023c:	200000c8 	.word	0x200000c8
 8000240:	20000120 	.word	0x20000120
 8000244:	2000009c 	.word	0x2000009c

08000248 <SystemClock_Config>:
	 HAL_Delay(Delay);
  }


void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	@ 0x40
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	@ 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f002 fe30 	bl	8002ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026a:	2302      	movs	r3, #2
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2310      	movs	r3, #16
 8000274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027a:	2300      	movs	r3, #0
 800027c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800027e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f001 f8d5 	bl	8001438 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000294:	f000 f8ce 	bl	8000434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2302      	movs	r3, #2
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 f8fe 	bl	80024b4 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002be:	f000 f8b9 	bl	8000434 <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3740      	adds	r7, #64	@ 0x40
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80002dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <MX_DAC1_Init+0x4c>)
 80002de:	4a0f      	ldr	r2, [pc, #60]	@ (800031c <MX_DAC1_Init+0x50>)
 80002e0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80002e2:	480d      	ldr	r0, [pc, #52]	@ (8000318 <MX_DAC1_Init+0x4c>)
 80002e4:	f000 fb71 	bl	80009ca <HAL_DAC_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80002ee:	f000 f8a1 	bl	8000434 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80002f2:	2324      	movs	r3, #36	@ 0x24
 80002f4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	4619      	mov	r1, r3
 8000300:	4805      	ldr	r0, [pc, #20]	@ (8000318 <MX_DAC1_Init+0x4c>)
 8000302:	f000 fc5f 	bl	8000bc4 <HAL_DAC_ConfigChannel>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 800030c:	f000 f892 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	200000c8 	.word	0x200000c8
 800031c:	40007400 	.word	0x40007400

08000320 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800033e:	4b1d      	ldr	r3, [pc, #116]	@ (80003b4 <MX_TIM2_Init+0x94>)
 8000340:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000344:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000346:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <MX_TIM2_Init+0x94>)
 8000348:	2200      	movs	r2, #0
 800034a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034c:	4b19      	ldr	r3, [pc, #100]	@ (80003b4 <MX_TIM2_Init+0x94>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15;
 8000352:	4b18      	ldr	r3, [pc, #96]	@ (80003b4 <MX_TIM2_Init+0x94>)
 8000354:	220f      	movs	r2, #15
 8000356:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000358:	4b16      	ldr	r3, [pc, #88]	@ (80003b4 <MX_TIM2_Init+0x94>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035e:	4b15      	ldr	r3, [pc, #84]	@ (80003b4 <MX_TIM2_Init+0x94>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000364:	4813      	ldr	r0, [pc, #76]	@ (80003b4 <MX_TIM2_Init+0x94>)
 8000366:	f002 fa75 	bl	8002854 <HAL_TIM_Base_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000370:	f000 f860 	bl	8000434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000378:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	4619      	mov	r1, r3
 8000380:	480c      	ldr	r0, [pc, #48]	@ (80003b4 <MX_TIM2_Init+0x94>)
 8000382:	f002 fb45 	bl	8002a10 <HAL_TIM_ConfigClockSource>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800038c:	f000 f852 	bl	8000434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000390:	2320      	movs	r3, #32
 8000392:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <MX_TIM2_Init+0x94>)
 800039e:	f002 fd1f 	bl	8002de0 <HAL_TIMEx_MasterConfigSynchronization>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003a8:	f000 f844 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	3720      	adds	r7, #32
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000120 	.word	0x20000120

080003b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003be:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <MX_DMA_Init+0x48>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000400 <MX_DMA_Init+0x48>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <MX_DMA_Init+0x48>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2100      	movs	r1, #0
 80003da:	200c      	movs	r0, #12
 80003dc:	f000 fabf 	bl	800095e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80003e0:	200c      	movs	r0, #12
 80003e2:	f000 fad8 	bl	8000996 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2100      	movs	r1, #0
 80003ea:	200d      	movs	r0, #13
 80003ec:	f000 fab7 	bl	800095e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80003f0:	200d      	movs	r0, #13
 80003f2:	f000 fad0 	bl	8000996 <HAL_NVIC_EnableIRQ>

}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <MX_GPIO_Init+0x2c>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a08      	ldr	r2, [pc, #32]	@ (8000430 <MX_GPIO_Init+0x2c>)
 8000410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <MX_GPIO_Init+0x2c>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <Error_Handler+0x8>

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000446:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <HAL_MspInit+0x44>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a0e      	ldr	r2, [pc, #56]	@ (8000484 <HAL_MspInit+0x44>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <HAL_MspInit+0x44>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <HAL_MspInit+0x44>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a08      	ldr	r2, [pc, #32]	@ (8000484 <HAL_MspInit+0x44>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000468:	61d3      	str	r3, [r2, #28]
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <HAL_MspInit+0x44>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	@ 0x28
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000558 <HAL_DAC_MspInit+0xd0>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d152      	bne.n	8000550 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80004aa:	4b2c      	ldr	r3, [pc, #176]	@ (800055c <HAL_DAC_MspInit+0xd4>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a2b      	ldr	r2, [pc, #172]	@ (800055c <HAL_DAC_MspInit+0xd4>)
 80004b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b29      	ldr	r3, [pc, #164]	@ (800055c <HAL_DAC_MspInit+0xd4>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b26      	ldr	r3, [pc, #152]	@ (800055c <HAL_DAC_MspInit+0xd4>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a25      	ldr	r2, [pc, #148]	@ (800055c <HAL_DAC_MspInit+0xd4>)
 80004c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b23      	ldr	r3, [pc, #140]	@ (800055c <HAL_DAC_MspInit+0xd4>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004da:	2310      	movs	r3, #16
 80004dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004de:	2303      	movs	r3, #3
 80004e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	4619      	mov	r1, r3
 80004ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f0:	f000 fe30 	bl	8001154 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80004f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <HAL_DAC_MspInit+0xd8>)
 80004f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000564 <HAL_DAC_MspInit+0xdc>)
 80004f8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004fa:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <HAL_DAC_MspInit+0xd8>)
 80004fc:	2210      	movs	r2, #16
 80004fe:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000500:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <HAL_DAC_MspInit+0xd8>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000506:	4b16      	ldr	r3, [pc, #88]	@ (8000560 <HAL_DAC_MspInit+0xd8>)
 8000508:	2280      	movs	r2, #128	@ 0x80
 800050a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800050c:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <HAL_DAC_MspInit+0xd8>)
 800050e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000512:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000514:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <HAL_DAC_MspInit+0xd8>)
 8000516:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800051a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800051c:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <HAL_DAC_MspInit+0xd8>)
 800051e:	2220      	movs	r2, #32
 8000520:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <HAL_DAC_MspInit+0xd8>)
 8000524:	2200      	movs	r2, #0
 8000526:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000528:	480d      	ldr	r0, [pc, #52]	@ (8000560 <HAL_DAC_MspInit+0xd8>)
 800052a:	f000 fc3d 	bl	8000da8 <HAL_DMA_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8000534:	f7ff ff7e 	bl	8000434 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000538:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <HAL_DAC_MspInit+0xe0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0a      	ldr	r2, [pc, #40]	@ (8000568 <HAL_DAC_MspInit+0xe0>)
 800053e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000542:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a06      	ldr	r2, [pc, #24]	@ (8000560 <HAL_DAC_MspInit+0xd8>)
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	4a05      	ldr	r2, [pc, #20]	@ (8000560 <HAL_DAC_MspInit+0xd8>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000550:	bf00      	nop
 8000552:	3728      	adds	r7, #40	@ 0x28
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40007400 	.word	0x40007400
 800055c:	40021000 	.word	0x40021000
 8000560:	200000dc 	.word	0x200000dc
 8000564:	40020030 	.word	0x40020030
 8000568:	40010000 	.word	0x40010000

0800056c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800057c:	d10b      	bne.n	8000596 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <HAL_TIM_Base_MspInit+0x38>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a08      	ldr	r2, [pc, #32]	@ (80005a4 <HAL_TIM_Base_MspInit+0x38>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <HAL_TIM_Base_MspInit+0x38>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <NMI_Handler+0x4>

080005b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <HardFault_Handler+0x4>

080005b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <MemManage_Handler+0x4>

080005c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <UsageFault_Handler+0x4>

080005d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fe:	f000 f88f 	bl	8000720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <DMA1_Channel3_IRQHandler+0x10>)
 800060e:	f000 fcaf 	bl	8000f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000dc 	.word	0x200000dc

0800061c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <SystemInit+0x20>)
 8000622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000626:	4a05      	ldr	r2, [pc, #20]	@ (800063c <SystemInit+0x20>)
 8000628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800062c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000678 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000644:	f7ff ffea 	bl	800061c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000648:	480c      	ldr	r0, [pc, #48]	@ (800067c <LoopForever+0x6>)
  ldr r1, =_edata
 800064a:	490d      	ldr	r1, [pc, #52]	@ (8000680 <LoopForever+0xa>)
  ldr r2, =_sidata
 800064c:	4a0d      	ldr	r2, [pc, #52]	@ (8000684 <LoopForever+0xe>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a0a      	ldr	r2, [pc, #40]	@ (8000688 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000660:	4c0a      	ldr	r4, [pc, #40]	@ (800068c <LoopForever+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066e:	f002 fc2d 	bl	8002ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000672:	f7ff fda9 	bl	80001c8 <main>

08000676 <LoopForever>:

LoopForever:
    b LoopForever
 8000676:	e7fe      	b.n	8000676 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000678:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800067c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000680:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000684:	08002f64 	.word	0x08002f64
  ldr r2, =_sbss
 8000688:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800068c:	20000170 	.word	0x20000170

08000690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC1_2_IRQHandler>
	...

08000694 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000698:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <HAL_Init+0x28>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a07      	ldr	r2, [pc, #28]	@ (80006bc <HAL_Init+0x28>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f94f 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006aa:	200f      	movs	r0, #15
 80006ac:	f000 f808 	bl	80006c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b0:	f7ff fec6 	bl	8000440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40022000 	.word	0x40022000

080006c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <HAL_InitTick+0x54>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <HAL_InitTick+0x58>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006da:	fbb2 f3f3 	udiv	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f967 	bl	80009b2 <HAL_SYSTICK_Config>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00e      	b.n	800070c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d80a      	bhi.n	800070a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f4:	2200      	movs	r2, #0
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295
 80006fc:	f000 f92f 	bl	800095e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000700:	4a06      	ldr	r2, [pc, #24]	@ (800071c <HAL_InitTick+0x5c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000706:	2300      	movs	r3, #0
 8000708:	e000      	b.n	800070c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000a0 	.word	0x200000a0
 8000718:	200000a8 	.word	0x200000a8
 800071c:	200000a4 	.word	0x200000a4

08000720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <HAL_IncTick+0x20>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_IncTick+0x24>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4413      	add	r3, r2
 8000730:	4a04      	ldr	r2, [pc, #16]	@ (8000744 <HAL_IncTick+0x24>)
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	200000a8 	.word	0x200000a8
 8000744:	2000016c 	.word	0x2000016c

08000748 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;  
 800074c:	4b03      	ldr	r3, [pc, #12]	@ (800075c <HAL_GetTick+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	2000016c 	.word	0x2000016c

08000760 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000768:	f7ff ffee 	bl	8000748 <HAL_GetTick>
 800076c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000778:	d005      	beq.n	8000786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800077a:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <HAL_Delay+0x44>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4413      	add	r3, r2
 8000784:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000786:	bf00      	nop
 8000788:	f7ff ffde 	bl	8000748 <HAL_GetTick>
 800078c:	4602      	mov	r2, r0
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	429a      	cmp	r2, r3
 8000796:	d8f7      	bhi.n	8000788 <HAL_Delay+0x28>
  {
  }
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000a8 	.word	0x200000a8

080007a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	@ (8000808 <__NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db0b      	blt.n	8000836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 021f 	and.w	r2, r3, #31
 8000824:	4907      	ldr	r1, [pc, #28]	@ (8000844 <__NVIC_EnableIRQ+0x38>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	2001      	movs	r0, #1
 800082e:	fa00 f202 	lsl.w	r2, r0, r2
 8000832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	@ (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	@ (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	@ 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
         );
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	@ 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f7ff ff8e 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff29 	bl	80007a8 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff3e 	bl	80007f0 <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ff8e 	bl	800089c <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff5d 	bl	8000848 <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff31 	bl	800080c <__NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ffa2 	bl	8000904 <SysTick_Config>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d101      	bne.n	80009dc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e014      	b.n	8000a06 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	791b      	ldrb	r3, [r3, #4]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d105      	bne.n	80009f2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff fd4b 	bl	8000488 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2202      	movs	r2, #2
 80009f6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	795b      	ldrb	r3, [r3, #5]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d101      	bne.n	8000a6a <HAL_DAC_Start_DMA+0x1e>
 8000a66:	2302      	movs	r3, #2
 8000a68:	e09b      	b.n	8000ba2 <HAL_DAC_Start_DMA+0x156>
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2202      	movs	r2, #2
 8000a74:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d12f      	bne.n	8000adc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	4a4a      	ldr	r2, [pc, #296]	@ (8000bac <HAL_DAC_Start_DMA+0x160>)
 8000a82:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	4a49      	ldr	r2, [pc, #292]	@ (8000bb0 <HAL_DAC_Start_DMA+0x164>)
 8000a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	4a48      	ldr	r2, [pc, #288]	@ (8000bb4 <HAL_DAC_Start_DMA+0x168>)
 8000a92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000aa2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	2b08      	cmp	r3, #8
 8000aa8:	d013      	beq.n	8000ad2 <HAL_DAC_Start_DMA+0x86>
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	2b08      	cmp	r3, #8
 8000aae:	d845      	bhi.n	8000b3c <HAL_DAC_Start_DMA+0xf0>
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_DAC_Start_DMA+0x72>
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d005      	beq.n	8000ac8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000abc:	e03e      	b.n	8000b3c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	3308      	adds	r3, #8
 8000ac4:	617b      	str	r3, [r7, #20]
        break;
 8000ac6:	e03c      	b.n	8000b42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	330c      	adds	r3, #12
 8000ace:	617b      	str	r3, [r7, #20]
        break;
 8000ad0:	e037      	b.n	8000b42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3310      	adds	r3, #16
 8000ad8:	617b      	str	r3, [r7, #20]
        break;
 8000ada:	e032      	b.n	8000b42 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	4a35      	ldr	r2, [pc, #212]	@ (8000bb8 <HAL_DAC_Start_DMA+0x16c>)
 8000ae2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	4a34      	ldr	r2, [pc, #208]	@ (8000bbc <HAL_DAC_Start_DMA+0x170>)
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	4a33      	ldr	r2, [pc, #204]	@ (8000bc0 <HAL_DAC_Start_DMA+0x174>)
 8000af2:	631a      	str	r2, [r3, #48]	@ 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b02:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	d013      	beq.n	8000b32 <HAL_DAC_Start_DMA+0xe6>
 8000b0a:	6a3b      	ldr	r3, [r7, #32]
 8000b0c:	2b08      	cmp	r3, #8
 8000b0e:	d817      	bhi.n	8000b40 <HAL_DAC_Start_DMA+0xf4>
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_DAC_Start_DMA+0xd2>
 8000b16:	6a3b      	ldr	r3, [r7, #32]
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d005      	beq.n	8000b28 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000b1c:	e010      	b.n	8000b40 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3314      	adds	r3, #20
 8000b24:	617b      	str	r3, [r7, #20]
        break;
 8000b26:	e00c      	b.n	8000b42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3318      	adds	r3, #24
 8000b2e:	617b      	str	r3, [r7, #20]
        break;
 8000b30:	e007      	b.n	8000b42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	331c      	adds	r3, #28
 8000b38:	617b      	str	r3, [r7, #20]
        break;
 8000b3a:	e002      	b.n	8000b42 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000b3c:	bf00      	nop
 8000b3e:	e000      	b.n	8000b42 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000b40:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10f      	bne.n	8000b68 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000b56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	6898      	ldr	r0, [r3, #8]
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	f000 f968 	bl	8000e36 <HAL_DMA_Start_IT>
 8000b66:	e00e      	b.n	8000b86 <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000b76:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	68d8      	ldr	r0, [r3, #12]
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	f000 f958 	bl	8000e36 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	2201      	movs	r2, #1
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	409a      	lsls	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	08000cd1 	.word	0x08000cd1
 8000bb0:	08000cf3 	.word	0x08000cf3
 8000bb4:	08000d0f 	.word	0x08000d0f
 8000bb8:	08000d3d 	.word	0x08000d3d
 8000bbc:	08000d5f 	.word	0x08000d5f
 8000bc0:	08000d7b 	.word	0x08000d7b

08000bc4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	795b      	ldrb	r3, [r3, #5]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d101      	bne.n	8000be4 <HAL_DAC_ConfigChannel+0x20>
 8000be0:	2302      	movs	r3, #2
 8000be2:	e04e      	b.n	8000c82 <HAL_DAC_ConfigChannel+0xbe>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2201      	movs	r2, #1
 8000be8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2202      	movs	r2, #2
 8000bee:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a24      	ldr	r2, [pc, #144]	@ (8000c90 <HAL_DAC_ConfigChannel+0xcc>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d112      	bne.n	8000c28 <HAL_DAC_ConfigChannel+0x64>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d10f      	bne.n	8000c28 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000c08:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	4013      	ands	r3, r2
 8000c18:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	e00e      	b.n	8000c46 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8000c28:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	4013      	ands	r3, r2
 8000c38:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6819      	ldr	r1, [r3, #0]
 8000c62:	22c0      	movs	r2, #192	@ 0xc0
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	400a      	ands	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2201      	movs	r2, #1
 8000c78:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	371c      	adds	r7, #28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40007400 	.word	0x40007400

08000c94 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cdc:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f7ff fe95 	bl	8000a0e <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	711a      	strb	r2, [r3, #4]
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cfe:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f7ff fe8e 	bl	8000a22 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1a:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	f043 0204 	orr.w	r2, r3, #4
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f7ff fe84 	bl	8000a36 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2201      	movs	r2, #1
 8000d32:	711a      	strb	r2, [r3, #4]
}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d48:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f7ff ffa2 	bl	8000c94 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2201      	movs	r2, #1
 8000d54:	711a      	strb	r2, [r3, #4]
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d6a:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f7ff ff9b 	bl	8000ca8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d86:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	f043 0204 	orr.w	r2, r3, #4
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f7ff ff91 	bl	8000cbc <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	711a      	strb	r2, [r3, #4]
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e037      	b.n	8000e2e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000dd4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000dd8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f97f 	bl	8001114 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d101      	bne.n	8000e56 <HAL_DMA_Start_IT+0x20>
 8000e52:	2302      	movs	r3, #2
 8000e54:	e04a      	b.n	8000eec <HAL_DMA_Start_IT+0xb6>
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d13a      	bne.n	8000ede <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0201 	bic.w	r2, r2, #1
 8000e84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f000 f912 	bl	80010b6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d008      	beq.n	8000eac <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f042 020e 	orr.w	r2, r2, #14
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e00f      	b.n	8000ecc <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 020a 	orr.w	r2, r2, #10
 8000eba:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0204 	bic.w	r2, r2, #4
 8000eca:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0201 	orr.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e005      	b.n	8000eea <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d005      	beq.n	8000f16 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e027      	b.n	8000f66 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 020e 	bic.w	r2, r2, #14
 8000f24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0201 	bic.w	r2, r2, #1
 8000f34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	4798      	blx	r3
    }
  }
  return status;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d024      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x72>
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d01f      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0320 	and.w	r3, r3, #32
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d107      	bne.n	8000fc0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0204 	bic.w	r2, r2, #4
 8000fbe:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fc8:	2104      	movs	r1, #4
 8000fca:	fa01 f202 	lsl.w	r2, r1, r2
 8000fce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d06a      	beq.n	80010ae <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000fe0:	e065      	b.n	80010ae <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d02c      	beq.n	800104c <HAL_DMA_IRQHandler+0xdc>
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d027      	beq.n	800104c <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0320 	and.w	r3, r3, #32
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10b      	bne.n	8001022 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 020a 	bic.w	r2, r2, #10
 8001018:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800102a:	2102      	movs	r1, #2
 800102c:	fa01 f202 	lsl.w	r2, r1, r2
 8001030:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800103e:	2b00      	cmp	r3, #0
 8001040:	d035      	beq.n	80010ae <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800104a:	e030      	b.n	80010ae <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	2208      	movs	r2, #8
 8001052:	409a      	lsls	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d028      	beq.n	80010ae <HAL_DMA_IRQHandler+0x13e>
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	2b00      	cmp	r3, #0
 8001064:	d023      	beq.n	80010ae <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 020e 	bic.w	r2, r2, #14
 8001074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	4798      	blx	r3
    }
  }
}
 80010ac:	e7ff      	b.n	80010ae <HAL_DMA_IRQHandler+0x13e>
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010cc:	2101      	movs	r1, #1
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b10      	cmp	r3, #16
 80010e2:	d108      	bne.n	80010f6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010f4:	e007      	b.n	8001106 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	60da      	str	r2, [r3, #12]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <DMA_CalcBaseAndBitshift+0x34>)
 8001124:	4413      	add	r3, r2
 8001126:	4a09      	ldr	r2, [pc, #36]	@ (800114c <DMA_CalcBaseAndBitshift+0x38>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	009a      	lsls	r2, r3, #2
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a06      	ldr	r2, [pc, #24]	@ (8001150 <DMA_CalcBaseAndBitshift+0x3c>)
 8001138:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	bffdfff8 	.word	0xbffdfff8
 800114c:	cccccccd 	.word	0xcccccccd
 8001150:	40020000 	.word	0x40020000

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001162:	e14e      	b.n	8001402 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2101      	movs	r1, #1
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8140 	beq.w	80013fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b01      	cmp	r3, #1
 8001186:	d005      	beq.n	8001194 <HAL_GPIO_Init+0x40>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d130      	bne.n	80011f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ca:	2201      	movs	r2, #1
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	f003 0201 	and.w	r2, r3, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d017      	beq.n	8001232 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d123      	bne.n	8001286 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	691a      	ldr	r2, [r3, #16]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	6939      	ldr	r1, [r7, #16]
 8001282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0203 	and.w	r2, r3, #3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 809a 	beq.w	80013fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c8:	4b55      	ldr	r3, [pc, #340]	@ (8001420 <HAL_GPIO_Init+0x2cc>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a54      	ldr	r2, [pc, #336]	@ (8001420 <HAL_GPIO_Init+0x2cc>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b52      	ldr	r3, [pc, #328]	@ (8001420 <HAL_GPIO_Init+0x2cc>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012e0:	4a50      	ldr	r2, [pc, #320]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800130a:	d013      	beq.n	8001334 <HAL_GPIO_Init+0x1e0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a46      	ldr	r2, [pc, #280]	@ (8001428 <HAL_GPIO_Init+0x2d4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d00d      	beq.n	8001330 <HAL_GPIO_Init+0x1dc>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a45      	ldr	r2, [pc, #276]	@ (800142c <HAL_GPIO_Init+0x2d8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_Init+0x1d8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a44      	ldr	r2, [pc, #272]	@ (8001430 <HAL_GPIO_Init+0x2dc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <HAL_GPIO_Init+0x1d4>
 8001324:	2303      	movs	r3, #3
 8001326:	e006      	b.n	8001336 <HAL_GPIO_Init+0x1e2>
 8001328:	2305      	movs	r3, #5
 800132a:	e004      	b.n	8001336 <HAL_GPIO_Init+0x1e2>
 800132c:	2302      	movs	r3, #2
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0x1e2>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_GPIO_Init+0x1e2>
 8001334:	2300      	movs	r3, #0
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	f002 0203 	and.w	r2, r2, #3
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	4093      	lsls	r3, r2
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001346:	4937      	ldr	r1, [pc, #220]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001354:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001378:	4a2e      	ldr	r2, [pc, #184]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137e:	4b2d      	ldr	r3, [pc, #180]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013a2:	4a24      	ldr	r2, [pc, #144]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013a8:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013cc:	4a19      	ldr	r2, [pc, #100]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d2:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	f47f aea9 	bne.w	8001164 <HAL_GPIO_Init+0x10>
  }
}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000
 8001424:	40010000 	.word	0x40010000
 8001428:	48000400 	.word	0x48000400
 800142c:	48000800 	.word	0x48000800
 8001430:	48000c00 	.word	0x48000c00
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800143e:	af00      	add	r7, sp, #0
 8001440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001444:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001448:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800144a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800144e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	f001 b823 	b.w	80024a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001462:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 817d 	beq.w	800176e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001474:	4bbc      	ldr	r3, [pc, #752]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	2b04      	cmp	r3, #4
 800147e:	d00c      	beq.n	800149a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001480:	4bb9      	ldr	r3, [pc, #740]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b08      	cmp	r3, #8
 800148a:	d15c      	bne.n	8001546 <HAL_RCC_OscConfig+0x10e>
 800148c:	4bb6      	ldr	r3, [pc, #728]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001498:	d155      	bne.n	8001546 <HAL_RCC_OscConfig+0x10e>
 800149a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800149e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b2:	fab3 f383 	clz	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	095b      	lsrs	r3, r3, #5
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d102      	bne.n	80014cc <HAL_RCC_OscConfig+0x94>
 80014c6:	4ba8      	ldr	r3, [pc, #672]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	e015      	b.n	80014f8 <HAL_RCC_OscConfig+0xc0>
 80014cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014d0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80014e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014e4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80014e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80014f4:	4b9c      	ldr	r3, [pc, #624]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80014f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014fc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001500:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001504:	fa92 f2a2 	rbit	r2, r2
 8001508:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800150c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001510:	fab2 f282 	clz	r2, r2
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	f042 0220 	orr.w	r2, r2, #32
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	f002 021f 	and.w	r2, r2, #31
 8001520:	2101      	movs	r1, #1
 8001522:	fa01 f202 	lsl.w	r2, r1, r2
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 811f 	beq.w	800176c <HAL_RCC_OscConfig+0x334>
 800152e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001532:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 8116 	bne.w	800176c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	f000 bfaf 	b.w	80024a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800154a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x12e>
 8001558:	4b83      	ldr	r3, [pc, #524]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a82      	ldr	r2, [pc, #520]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 800155e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e036      	b.n	80015d4 <HAL_RCC_OscConfig+0x19c>
 8001566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x158>
 8001576:	4b7c      	ldr	r3, [pc, #496]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a7b      	ldr	r2, [pc, #492]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 800157c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b79      	ldr	r3, [pc, #484]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a78      	ldr	r2, [pc, #480]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 8001588:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e021      	b.n	80015d4 <HAL_RCC_OscConfig+0x19c>
 8001590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001594:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x184>
 80015a2:	4b71      	ldr	r3, [pc, #452]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a70      	ldr	r2, [pc, #448]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a6d      	ldr	r2, [pc, #436]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e00b      	b.n	80015d4 <HAL_RCC_OscConfig+0x19c>
 80015bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a69      	ldr	r2, [pc, #420]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80015c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b67      	ldr	r3, [pc, #412]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a66      	ldr	r2, [pc, #408]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015d4:	4b64      	ldr	r3, [pc, #400]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80015d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d8:	f023 020f 	bic.w	r2, r3, #15
 80015dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	495f      	ldr	r1, [pc, #380]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d059      	beq.n	80016b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff f8a3 	bl	8000748 <HAL_GetTick>
 8001602:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	e00a      	b.n	800161e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff f89e 	bl	8000748 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b64      	cmp	r3, #100	@ 0x64
 8001616:	d902      	bls.n	800161e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	f000 bf43 	b.w	80024a4 <HAL_RCC_OscConfig+0x106c>
 800161e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001622:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001632:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b01      	cmp	r3, #1
 8001648:	d102      	bne.n	8001650 <HAL_RCC_OscConfig+0x218>
 800164a:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	e015      	b.n	800167c <HAL_RCC_OscConfig+0x244>
 8001650:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001654:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001658:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001664:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001668:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800166c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001670:	fa93 f3a3 	rbit	r3, r3
 8001674:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001678:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 800167a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001680:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001684:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001688:	fa92 f2a2 	rbit	r2, r2
 800168c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001690:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001694:	fab2 f282 	clz	r2, r2
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	f042 0220 	orr.w	r2, r2, #32
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	f002 021f 	and.w	r2, r2, #31
 80016a4:	2101      	movs	r1, #1
 80016a6:	fa01 f202 	lsl.w	r2, r1, r2
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0ab      	beq.n	8001608 <HAL_RCC_OscConfig+0x1d0>
 80016b0:	e05d      	b.n	800176e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff f849 	bl	8000748 <HAL_GetTick>
 80016b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff f844 	bl	8000748 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b64      	cmp	r3, #100	@ 0x64
 80016ca:	d902      	bls.n	80016d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f000 bee9 	b.w	80024a4 <HAL_RCC_OscConfig+0x106c>
 80016d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016d6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80016de:	fa93 f3a3 	rbit	r3, r3
 80016e2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80016e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	095b      	lsrs	r3, r3, #5
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d102      	bne.n	8001704 <HAL_RCC_OscConfig+0x2cc>
 80016fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	e015      	b.n	8001730 <HAL_RCC_OscConfig+0x2f8>
 8001704:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001708:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001718:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800171c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001720:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800172c:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 800172e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001730:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001734:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001738:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800173c:	fa92 f2a2 	rbit	r2, r2
 8001740:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001744:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001748:	fab2 f282 	clz	r2, r2
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	f042 0220 	orr.w	r2, r2, #32
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	f002 021f 	and.w	r2, r2, #31
 8001758:	2101      	movs	r1, #1
 800175a:	fa01 f202 	lsl.w	r2, r1, r2
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1ab      	bne.n	80016bc <HAL_RCC_OscConfig+0x284>
 8001764:	e003      	b.n	800176e <HAL_RCC_OscConfig+0x336>
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001772:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 817d 	beq.w	8001a7e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001784:	4ba6      	ldr	r3, [pc, #664]	@ (8001a20 <HAL_RCC_OscConfig+0x5e8>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00b      	beq.n	80017a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001790:	4ba3      	ldr	r3, [pc, #652]	@ (8001a20 <HAL_RCC_OscConfig+0x5e8>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b08      	cmp	r3, #8
 800179a:	d172      	bne.n	8001882 <HAL_RCC_OscConfig+0x44a>
 800179c:	4ba0      	ldr	r3, [pc, #640]	@ (8001a20 <HAL_RCC_OscConfig+0x5e8>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d16c      	bne.n	8001882 <HAL_RCC_OscConfig+0x44a>
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80017ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	095b      	lsrs	r3, r3, #5
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d102      	bne.n	80017d8 <HAL_RCC_OscConfig+0x3a0>
 80017d2:	4b93      	ldr	r3, [pc, #588]	@ (8001a20 <HAL_RCC_OscConfig+0x5e8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	e013      	b.n	8001800 <HAL_RCC_OscConfig+0x3c8>
 80017d8:	2302      	movs	r3, #2
 80017da:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80017e2:	fa93 f3a3 	rbit	r3, r3
 80017e6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80017ea:	2302      	movs	r3, #2
 80017ec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80017f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80017fc:	4b88      	ldr	r3, [pc, #544]	@ (8001a20 <HAL_RCC_OscConfig+0x5e8>)
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	2202      	movs	r2, #2
 8001802:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001806:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800180a:	fa92 f2a2 	rbit	r2, r2
 800180e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001812:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001816:	fab2 f282 	clz	r2, r2
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	f042 0220 	orr.w	r2, r2, #32
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	f002 021f 	and.w	r2, r2, #31
 8001826:	2101      	movs	r1, #1
 8001828:	fa01 f202 	lsl.w	r2, r1, r2
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00a      	beq.n	8001848 <HAL_RCC_OscConfig+0x410>
 8001832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d002      	beq.n	8001848 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	f000 be2e 	b.w	80024a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001848:	4b75      	ldr	r3, [pc, #468]	@ (8001a20 <HAL_RCC_OscConfig+0x5e8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001854:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	21f8      	movs	r1, #248	@ 0xf8
 800185e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001866:	fa91 f1a1 	rbit	r1, r1
 800186a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800186e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001872:	fab1 f181 	clz	r1, r1
 8001876:	b2c9      	uxtb	r1, r1
 8001878:	408b      	lsls	r3, r1
 800187a:	4969      	ldr	r1, [pc, #420]	@ (8001a20 <HAL_RCC_OscConfig+0x5e8>)
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001880:	e0fd      	b.n	8001a7e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001886:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8088 	beq.w	80019a4 <HAL_RCC_OscConfig+0x56c>
 8001894:	2301      	movs	r3, #1
 8001896:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80018a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	461a      	mov	r2, r3
 80018bc:	2301      	movs	r3, #1
 80018be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7fe ff42 	bl	8000748 <HAL_GetTick>
 80018c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ca:	f7fe ff3d 	bl	8000748 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d902      	bls.n	80018e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	f000 bde2 	b.w	80024a4 <HAL_RCC_OscConfig+0x106c>
 80018e0:	2302      	movs	r3, #2
 80018e2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80018f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	095b      	lsrs	r3, r3, #5
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d102      	bne.n	8001910 <HAL_RCC_OscConfig+0x4d8>
 800190a:	4b45      	ldr	r3, [pc, #276]	@ (8001a20 <HAL_RCC_OscConfig+0x5e8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	e013      	b.n	8001938 <HAL_RCC_OscConfig+0x500>
 8001910:	2302      	movs	r3, #2
 8001912:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001922:	2302      	movs	r3, #2
 8001924:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001928:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001934:	4b3a      	ldr	r3, [pc, #232]	@ (8001a20 <HAL_RCC_OscConfig+0x5e8>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	2202      	movs	r2, #2
 800193a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800193e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001942:	fa92 f2a2 	rbit	r2, r2
 8001946:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800194a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800194e:	fab2 f282 	clz	r2, r2
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	f042 0220 	orr.w	r2, r2, #32
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	f002 021f 	and.w	r2, r2, #31
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f202 	lsl.w	r2, r1, r2
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0af      	beq.n	80018ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a20 <HAL_RCC_OscConfig+0x5e8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001976:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	21f8      	movs	r1, #248	@ 0xf8
 8001980:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001988:	fa91 f1a1 	rbit	r1, r1
 800198c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001990:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001994:	fab1 f181 	clz	r1, r1
 8001998:	b2c9      	uxtb	r1, r1
 800199a:	408b      	lsls	r3, r1
 800199c:	4920      	ldr	r1, [pc, #128]	@ (8001a20 <HAL_RCC_OscConfig+0x5e8>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
 80019a2:	e06c      	b.n	8001a7e <HAL_RCC_OscConfig+0x646>
 80019a4:	2301      	movs	r3, #1
 80019a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80019b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	461a      	mov	r2, r3
 80019cc:	2300      	movs	r3, #0
 80019ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7fe feba 	bl	8000748 <HAL_GetTick>
 80019d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019da:	f7fe feb5 	bl	8000748 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d902      	bls.n	80019f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	f000 bd5a 	b.w	80024a4 <HAL_RCC_OscConfig+0x106c>
 80019f0:	2302      	movs	r3, #2
 80019f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	095b      	lsrs	r3, r3, #5
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d104      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5ec>
 8001a1a:	4b01      	ldr	r3, [pc, #4]	@ (8001a20 <HAL_RCC_OscConfig+0x5e8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	e015      	b.n	8001a4c <HAL_RCC_OscConfig+0x614>
 8001a20:	40021000 	.word	0x40021000
 8001a24:	2302      	movs	r3, #2
 8001a26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a36:	2302      	movs	r3, #2
 8001a38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001a48:	4bc8      	ldr	r3, [pc, #800]	@ (8001d6c <HAL_RCC_OscConfig+0x934>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001a52:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a56:	fa92 f2a2 	rbit	r2, r2
 8001a5a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001a5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001a62:	fab2 f282 	clz	r2, r2
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f002 021f 	and.w	r2, r2, #31
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f202 	lsl.w	r2, r1, r2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ad      	bne.n	80019da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 8110 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d079      	beq.n	8001b98 <HAL_RCC_OscConfig+0x760>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001aae:	fa93 f3a3 	rbit	r3, r3
 8001ab2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4bab      	ldr	r3, [pc, #684]	@ (8001d70 <HAL_RCC_OscConfig+0x938>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2301      	movs	r3, #1
 8001acc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ace:	f7fe fe3b 	bl	8000748 <HAL_GetTick>
 8001ad2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7fe fe36 	bl	8000748 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d902      	bls.n	8001aee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	f000 bcdb 	b.w	80024a4 <HAL_RCC_OscConfig+0x106c>
 8001aee:	2302      	movs	r3, #2
 8001af0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b04:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b08:	2202      	movs	r2, #2
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b10:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b48:	4b88      	ldr	r3, [pc, #544]	@ (8001d6c <HAL_RCC_OscConfig+0x934>)
 8001b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b54:	2102      	movs	r1, #2
 8001b56:	6019      	str	r1, [r3, #0]
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f1a3 	rbit	r1, r3
 8001b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b6e:	6019      	str	r1, [r3, #0]
  return result;
 8001b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b74:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0a0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x6a0>
 8001b96:	e08d      	b.n	8001cb4 <HAL_RCC_OscConfig+0x87c>
 8001b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bba:	601a      	str	r2, [r3, #0]
  return result;
 8001bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bc4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b68      	ldr	r3, [pc, #416]	@ (8001d70 <HAL_RCC_OscConfig+0x938>)
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bda:	f7fe fdb5 	bl	8000748 <HAL_GetTick>
 8001bde:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be4:	f7fe fdb0 	bl	8000748 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d902      	bls.n	8001bfa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	f000 bc55 	b.w	80024a4 <HAL_RCC_OscConfig+0x106c>
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001c02:	2202      	movs	r2, #2
 8001c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	fa93 f2a3 	rbit	r2, r3
 8001c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c22:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c26:	2202      	movs	r2, #2
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c46:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c52:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c66:	4b41      	ldr	r3, [pc, #260]	@ (8001d6c <HAL_RCC_OscConfig+0x934>)
 8001c68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c72:	2102      	movs	r1, #2
 8001c74:	6019      	str	r1, [r3, #0]
 8001c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f1a3 	rbit	r1, r3
 8001c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c8c:	6019      	str	r1, [r3, #0]
  return result;
 8001c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c92:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	2101      	movs	r1, #1
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d197      	bne.n	8001be4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 81a1 	beq.w	800200c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd0:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <HAL_RCC_OscConfig+0x934>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d116      	bne.n	8001d0a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cdc:	4b23      	ldr	r3, [pc, #140]	@ (8001d6c <HAL_RCC_OscConfig+0x934>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	4a22      	ldr	r2, [pc, #136]	@ (8001d6c <HAL_RCC_OscConfig+0x934>)
 8001ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	61d3      	str	r3, [r2, #28]
 8001ce8:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <HAL_RCC_OscConfig+0x934>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001d02:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <HAL_RCC_OscConfig+0x93c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d11a      	bne.n	8001d4c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d16:	4b17      	ldr	r3, [pc, #92]	@ (8001d74 <HAL_RCC_OscConfig+0x93c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a16      	ldr	r2, [pc, #88]	@ (8001d74 <HAL_RCC_OscConfig+0x93c>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d22:	f7fe fd11 	bl	8000748 <HAL_GetTick>
 8001d26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	e009      	b.n	8001d40 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2c:	f7fe fd0c 	bl	8000748 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b64      	cmp	r3, #100	@ 0x64
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e3b1      	b.n	80024a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <HAL_RCC_OscConfig+0x93c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ef      	beq.n	8001d2c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d10d      	bne.n	8001d78 <HAL_RCC_OscConfig+0x940>
 8001d5c:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <HAL_RCC_OscConfig+0x934>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a02      	ldr	r2, [pc, #8]	@ (8001d6c <HAL_RCC_OscConfig+0x934>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	e03c      	b.n	8001de4 <HAL_RCC_OscConfig+0x9ac>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	10908120 	.word	0x10908120
 8001d74:	40007000 	.word	0x40007000
 8001d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10c      	bne.n	8001da2 <HAL_RCC_OscConfig+0x96a>
 8001d88:	4bc1      	ldr	r3, [pc, #772]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4ac0      	ldr	r2, [pc, #768]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	4bbe      	ldr	r3, [pc, #760]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4abd      	ldr	r2, [pc, #756]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001d9a:	f023 0304 	bic.w	r3, r3, #4
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	e020      	b.n	8001de4 <HAL_RCC_OscConfig+0x9ac>
 8001da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x994>
 8001db2:	4bb7      	ldr	r3, [pc, #732]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4ab6      	ldr	r2, [pc, #728]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6213      	str	r3, [r2, #32]
 8001dbe:	4bb4      	ldr	r3, [pc, #720]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4ab3      	ldr	r2, [pc, #716]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0x9ac>
 8001dcc:	4bb0      	ldr	r3, [pc, #704]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4aaf      	ldr	r2, [pc, #700]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	4bad      	ldr	r3, [pc, #692]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4aac      	ldr	r2, [pc, #688]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8081 	beq.w	8001ef8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7fe fca7 	bl	8000748 <HAL_GetTick>
 8001dfa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7fe fca2 	bl	8000748 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e345      	b.n	80024a4 <HAL_RCC_OscConfig+0x106c>
 8001e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e20:	2202      	movs	r2, #2
 8001e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e28:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	fa93 f2a3 	rbit	r2, r3
 8001e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e36:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e44:	2202      	movs	r2, #2
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e5e:	601a      	str	r2, [r3, #0]
  return result;
 8001e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e64:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d102      	bne.n	8001e84 <HAL_RCC_OscConfig+0xa4c>
 8001e7e:	4b84      	ldr	r3, [pc, #528]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	e013      	b.n	8001eac <HAL_RCC_OscConfig+0xa74>
 8001e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e88:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e94:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fa93 f2a3 	rbit	r2, r3
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4b79      	ldr	r3, [pc, #484]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eb0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	6011      	str	r1, [r2, #0]
 8001eb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ebc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	fa92 f1a2 	rbit	r1, r2
 8001ec6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ece:	6011      	str	r1, [r2, #0]
  return result;
 8001ed0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ed4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	fab2 f282 	clz	r2, r2
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f002 021f 	and.w	r2, r2, #31
 8001eea:	2101      	movs	r1, #1
 8001eec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d084      	beq.n	8001e00 <HAL_RCC_OscConfig+0x9c8>
 8001ef6:	e07f      	b.n	8001ff8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef8:	f7fe fc26 	bl	8000748 <HAL_GetTick>
 8001efc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	e00b      	b.n	8001f1a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7fe fc21 	bl	8000748 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e2c4      	b.n	80024a4 <HAL_RCC_OscConfig+0x106c>
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f22:	2202      	movs	r2, #2
 8001f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	fa93 f2a3 	rbit	r2, r3
 8001f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f38:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f42:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f46:	2202      	movs	r2, #2
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	fa93 f2a3 	rbit	r2, r3
 8001f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f60:	601a      	str	r2, [r3, #0]
  return result;
 8001f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f66:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f043 0302 	orr.w	r3, r3, #2
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d102      	bne.n	8001f86 <HAL_RCC_OscConfig+0xb4e>
 8001f80:	4b43      	ldr	r3, [pc, #268]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	e013      	b.n	8001fae <HAL_RCC_OscConfig+0xb76>
 8001f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f8e:	2202      	movs	r2, #2
 8001f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f96:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	fa93 f2a3 	rbit	r2, r3
 8001fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fb2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	6011      	str	r1, [r2, #0]
 8001fba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fbe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	fa92 f1a2 	rbit	r1, r2
 8001fc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fcc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fd0:	6011      	str	r1, [r2, #0]
  return result;
 8001fd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fd6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	fab2 f282 	clz	r2, r2
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f002 021f 	and.w	r2, r2, #31
 8001fec:	2101      	movs	r1, #1
 8001fee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d184      	bne.n	8001f02 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ff8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002000:	4b23      	ldr	r3, [pc, #140]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4a22      	ldr	r2, [pc, #136]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8002006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800200a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002010:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8242 	beq.w	80024a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800201e:	4b1c      	ldr	r3, [pc, #112]	@ (8002090 <HAL_RCC_OscConfig+0xc58>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b08      	cmp	r3, #8
 8002028:	f000 8213 	beq.w	8002452 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002030:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b02      	cmp	r3, #2
 800203a:	f040 8162 	bne.w	8002302 <HAL_RCC_OscConfig+0xeca>
 800203e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002042:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002046:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800204a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002050:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	fa93 f2a3 	rbit	r2, r3
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002062:	601a      	str	r2, [r3, #0]
  return result;
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800206c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002078:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	461a      	mov	r2, r3
 8002080:	2300      	movs	r3, #0
 8002082:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe fb60 	bl	8000748 <HAL_GetTick>
 8002088:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208c:	e00c      	b.n	80020a8 <HAL_RCC_OscConfig+0xc70>
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7fe fb58 	bl	8000748 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1fd      	b.n	80024a4 <HAL_RCC_OscConfig+0x106c>
 80020a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020cc:	601a      	str	r2, [r3, #0]
  return result;
 80020ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0xcba>
 80020ec:	4bb0      	ldr	r3, [pc, #704]	@ (80023b0 <HAL_RCC_OscConfig+0xf78>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e027      	b.n	8002142 <HAL_RCC_OscConfig+0xd0a>
 80020f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80020fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002104:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	fa93 f2a3 	rbit	r2, r3
 800210e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002112:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002120:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	fa93 f2a3 	rbit	r2, r3
 8002134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002138:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	4b9c      	ldr	r3, [pc, #624]	@ (80023b0 <HAL_RCC_OscConfig+0xf78>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002146:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800214a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800214e:	6011      	str	r1, [r2, #0]
 8002150:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002154:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	fa92 f1a2 	rbit	r1, r2
 800215e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002162:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002166:	6011      	str	r1, [r2, #0]
  return result;
 8002168:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800216c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	fab2 f282 	clz	r2, r2
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f042 0220 	orr.w	r2, r2, #32
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f002 021f 	and.w	r2, r2, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d182      	bne.n	8002094 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218e:	4b88      	ldr	r3, [pc, #544]	@ (80023b0 <HAL_RCC_OscConfig+0xf78>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80021a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	430b      	orrs	r3, r1
 80021b0:	497f      	ldr	r1, [pc, #508]	@ (80023b0 <HAL_RCC_OscConfig+0xf78>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
 80021b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80021be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	fa93 f2a3 	rbit	r2, r3
 80021d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021da:	601a      	str	r2, [r3, #0]
  return result;
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	461a      	mov	r2, r3
 80021f8:	2301      	movs	r3, #1
 80021fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7fe faa4 	bl	8000748 <HAL_GetTick>
 8002200:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002204:	e009      	b.n	800221a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe fa9f 	bl	8000748 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e144      	b.n	80024a4 <HAL_RCC_OscConfig+0x106c>
 800221a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002222:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	fa93 f2a3 	rbit	r2, r3
 8002236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800223e:	601a      	str	r2, [r3, #0]
  return result;
 8002240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002244:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002248:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_RCC_OscConfig+0xe2c>
 800225e:	4b54      	ldr	r3, [pc, #336]	@ (80023b0 <HAL_RCC_OscConfig+0xf78>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	e027      	b.n	80022b4 <HAL_RCC_OscConfig+0xe7c>
 8002264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002268:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800226c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002276:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002284:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002292:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	fa93 f2a3 	rbit	r2, r3
 80022a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	4b3f      	ldr	r3, [pc, #252]	@ (80023b0 <HAL_RCC_OscConfig+0xf78>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022b8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80022bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022c0:	6011      	str	r1, [r2, #0]
 80022c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022c6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	fa92 f1a2 	rbit	r1, r2
 80022d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022d8:	6011      	str	r1, [r2, #0]
  return result;
 80022da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022de:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f042 0220 	orr.w	r2, r2, #32
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	f002 021f 	and.w	r2, r2, #31
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f202 	lsl.w	r2, r1, r2
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d082      	beq.n	8002206 <HAL_RCC_OscConfig+0xdce>
 8002300:	e0cf      	b.n	80024a2 <HAL_RCC_OscConfig+0x106a>
 8002302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002306:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800230a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800230e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002314:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	fa93 f2a3 	rbit	r2, r3
 800231e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002322:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002326:	601a      	str	r2, [r3, #0]
  return result;
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002330:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800233c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	461a      	mov	r2, r3
 8002344:	2300      	movs	r3, #0
 8002346:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe f9fe 	bl	8000748 <HAL_GetTick>
 800234c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002350:	e009      	b.n	8002366 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe f9f9 	bl	8000748 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e09e      	b.n	80024a4 <HAL_RCC_OscConfig+0x106c>
 8002366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800236e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002378:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	fa93 f2a3 	rbit	r2, r3
 8002382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002386:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800238a:	601a      	str	r2, [r3, #0]
  return result;
 800238c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002390:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002394:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d104      	bne.n	80023b4 <HAL_RCC_OscConfig+0xf7c>
 80023aa:	4b01      	ldr	r3, [pc, #4]	@ (80023b0 <HAL_RCC_OscConfig+0xf78>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	e029      	b.n	8002404 <HAL_RCC_OscConfig+0xfcc>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023de:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	4b2b      	ldr	r3, [pc, #172]	@ (80024b0 <HAL_RCC_OscConfig+0x1078>)
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002408:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800240c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002410:	6011      	str	r1, [r2, #0]
 8002412:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002416:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	fa92 f1a2 	rbit	r1, r2
 8002420:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002424:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002428:	6011      	str	r1, [r2, #0]
  return result;
 800242a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800242e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	fab2 f282 	clz	r2, r2
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	f042 0220 	orr.w	r2, r2, #32
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f002 021f 	and.w	r2, r2, #31
 8002444:	2101      	movs	r1, #1
 8002446:	fa01 f202 	lsl.w	r2, r1, r2
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d180      	bne.n	8002352 <HAL_RCC_OscConfig+0xf1a>
 8002450:	e027      	b.n	80024a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002456:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e01e      	b.n	80024a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002466:	4b12      	ldr	r3, [pc, #72]	@ (80024b0 <HAL_RCC_OscConfig+0x1078>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800246e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002472:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	429a      	cmp	r2, r3
 8002484:	d10b      	bne.n	800249e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002486:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800248a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800248e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002492:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b09e      	sub	sp, #120	@ 0x78
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e162      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b90      	ldr	r3, [pc, #576]	@ (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d910      	bls.n	80024fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b8d      	ldr	r3, [pc, #564]	@ (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 0207 	bic.w	r2, r3, #7
 80024e2:	498b      	ldr	r1, [pc, #556]	@ (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b89      	ldr	r3, [pc, #548]	@ (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e14a      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b82      	ldr	r3, [pc, #520]	@ (8002714 <HAL_RCC_ClockConfig+0x260>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	497f      	ldr	r1, [pc, #508]	@ (8002714 <HAL_RCC_ClockConfig+0x260>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80dc 	beq.w	80026e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d13c      	bne.n	80025aa <HAL_RCC_ClockConfig+0xf6>
 8002530:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002534:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800253e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d102      	bne.n	800255a <HAL_RCC_ClockConfig+0xa6>
 8002554:	4b6f      	ldr	r3, [pc, #444]	@ (8002714 <HAL_RCC_ClockConfig+0x260>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	e00f      	b.n	800257a <HAL_RCC_ClockConfig+0xc6>
 800255a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800255e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	667b      	str	r3, [r7, #100]	@ 0x64
 8002568:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800256c:	663b      	str	r3, [r7, #96]	@ 0x60
 800256e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002576:	4b67      	ldr	r3, [pc, #412]	@ (8002714 <HAL_RCC_ClockConfig+0x260>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800257e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002580:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002582:	fa92 f2a2 	rbit	r2, r2
 8002586:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002588:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800258a:	fab2 f282 	clz	r2, r2
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	f042 0220 	orr.w	r2, r2, #32
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	f002 021f 	and.w	r2, r2, #31
 800259a:	2101      	movs	r1, #1
 800259c:	fa01 f202 	lsl.w	r2, r1, r2
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d17b      	bne.n	800269e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0f3      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d13c      	bne.n	800262c <HAL_RCC_ClockConfig+0x178>
 80025b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80025c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d102      	bne.n	80025dc <HAL_RCC_ClockConfig+0x128>
 80025d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002714 <HAL_RCC_ClockConfig+0x260>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	e00f      	b.n	80025fc <HAL_RCC_ClockConfig+0x148>
 80025dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80025ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80025f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025f8:	4b46      	ldr	r3, [pc, #280]	@ (8002714 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002600:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002602:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002604:	fa92 f2a2 	rbit	r2, r2
 8002608:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800260a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800260c:	fab2 f282 	clz	r2, r2
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	f042 0220 	orr.w	r2, r2, #32
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	f002 021f 	and.w	r2, r2, #31
 800261c:	2101      	movs	r1, #1
 800261e:	fa01 f202 	lsl.w	r2, r1, r2
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d13a      	bne.n	800269e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b2      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
 800262c:	2302      	movs	r3, #2
 800262e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_RCC_ClockConfig+0x1a0>
 800264e:	4b31      	ldr	r3, [pc, #196]	@ (8002714 <HAL_RCC_ClockConfig+0x260>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	e00d      	b.n	8002670 <HAL_RCC_ClockConfig+0x1bc>
 8002654:	2302      	movs	r3, #2
 8002656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002660:	2302      	movs	r3, #2
 8002662:	623b      	str	r3, [r7, #32]
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	4b29      	ldr	r3, [pc, #164]	@ (8002714 <HAL_RCC_ClockConfig+0x260>)
 800266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002670:	2202      	movs	r2, #2
 8002672:	61ba      	str	r2, [r7, #24]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	fa92 f2a2 	rbit	r2, r2
 800267a:	617a      	str	r2, [r7, #20]
  return result;
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	fab2 f282 	clz	r2, r2
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f042 0220 	orr.w	r2, r2, #32
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f002 021f 	and.w	r2, r2, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f202 	lsl.w	r2, r1, r2
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e079      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269e:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <HAL_RCC_ClockConfig+0x260>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	491a      	ldr	r1, [pc, #104]	@ (8002714 <HAL_RCC_ClockConfig+0x260>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b0:	f7fe f84a 	bl	8000748 <HAL_GetTick>
 80026b4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b8:	f7fe f846 	bl	8000748 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e061      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <HAL_RCC_ClockConfig+0x260>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 020c 	and.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1eb      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d214      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4906      	ldr	r1, [pc, #24]	@ (8002710 <HAL_RCC_ClockConfig+0x25c>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <HAL_RCC_ClockConfig+0x25c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d005      	beq.n	8002718 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e040      	b.n	8002792 <HAL_RCC_ClockConfig+0x2de>
 8002710:	40022000 	.word	0x40022000
 8002714:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002724:	4b1d      	ldr	r3, [pc, #116]	@ (800279c <HAL_RCC_ClockConfig+0x2e8>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	491a      	ldr	r1, [pc, #104]	@ (800279c <HAL_RCC_ClockConfig+0x2e8>)
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002742:	4b16      	ldr	r3, [pc, #88]	@ (800279c <HAL_RCC_ClockConfig+0x2e8>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4912      	ldr	r1, [pc, #72]	@ (800279c <HAL_RCC_ClockConfig+0x2e8>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002756:	f000 f829 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 800275a:	4601      	mov	r1, r0
 800275c:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <HAL_RCC_ClockConfig+0x2e8>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002764:	22f0      	movs	r2, #240	@ 0xf0
 8002766:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	fa92 f2a2 	rbit	r2, r2
 800276e:	60fa      	str	r2, [r7, #12]
  return result;
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	fab2 f282 	clz	r2, r2
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	40d3      	lsrs	r3, r2
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_RCC_ClockConfig+0x2ec>)
 800277c:	5cd3      	ldrb	r3, [r2, r3]
 800277e:	fa21 f303 	lsr.w	r3, r1, r3
 8002782:	4a08      	ldr	r2, [pc, #32]	@ (80027a4 <HAL_RCC_ClockConfig+0x2f0>)
 8002784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <HAL_RCC_ClockConfig+0x2f4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd ff98 	bl	80006c0 <HAL_InitTick>
  
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3778      	adds	r7, #120	@ 0x78
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	08002f2c 	.word	0x08002f2c
 80027a4:	200000a0 	.word	0x200000a0
 80027a8:	200000a4 	.word	0x200000a4

080027ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80027c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x94>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d002      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x30>
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d003      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0x36>
 80027da:	e026      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027dc:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x98>)
 80027de:	613b      	str	r3, [r7, #16]
      break;
 80027e0:	e026      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	0c9b      	lsrs	r3, r3, #18
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	4a17      	ldr	r2, [pc, #92]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80027f0:	4b13      	ldr	r3, [pc, #76]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x94>)
 80027f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	4a14      	ldr	r2, [pc, #80]	@ (800284c <HAL_RCC_GetSysClockFreq+0xa0>)
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002808:	4a0e      	ldr	r2, [pc, #56]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x98>)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	e004      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a0c      	ldr	r2, [pc, #48]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xa4>)
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	613b      	str	r3, [r7, #16]
      break;
 8002828:	e002      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x98>)
 800282c:	613b      	str	r3, [r7, #16]
      break;
 800282e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002830:	693b      	ldr	r3, [r7, #16]
}
 8002832:	4618      	mov	r0, r3
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	007a1200 	.word	0x007a1200
 8002848:	08002f3c 	.word	0x08002f3c
 800284c:	08002f4c 	.word	0x08002f4c
 8002850:	003d0900 	.word	0x003d0900

08002854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e049      	b.n	80028fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fd fe76 	bl	800056c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f000 f986 	bl	8002ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d001      	beq.n	800291c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e038      	b.n	800298e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1c      	ldr	r2, [pc, #112]	@ (800299c <HAL_TIM_Base_Start+0x98>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00e      	beq.n	800294c <HAL_TIM_Base_Start+0x48>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002936:	d009      	beq.n	800294c <HAL_TIM_Base_Start+0x48>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a18      	ldr	r2, [pc, #96]	@ (80029a0 <HAL_TIM_Base_Start+0x9c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d004      	beq.n	800294c <HAL_TIM_Base_Start+0x48>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a17      	ldr	r2, [pc, #92]	@ (80029a4 <HAL_TIM_Base_Start+0xa0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d115      	bne.n	8002978 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <HAL_TIM_Base_Start+0xa4>)
 8002954:	4013      	ands	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b06      	cmp	r3, #6
 800295c:	d015      	beq.n	800298a <HAL_TIM_Base_Start+0x86>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002964:	d011      	beq.n	800298a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002976:	e008      	b.n	800298a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e000      	b.n	800298c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	40000400 	.word	0x40000400
 80029a4:	40014000 	.word	0x40014000
 80029a8:	00010007 	.word	0x00010007

080029ac <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029c2:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe fa93 	bl	8000ef4 <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6a1a      	ldr	r2, [r3, #32]
 80029d4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <HAL_TIM_Base_Stop_DMA+0x52>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a1a      	ldr	r2, [r3, #32]
 80029e4:	f240 4344 	movw	r3, #1092	@ 0x444
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d107      	bne.n	80029fe <HAL_TIM_Base_Stop_DMA+0x52>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_TIM_ConfigClockSource+0x1c>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e0b6      	b.n	8002b9a <HAL_TIM_ConfigClockSource+0x18a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a68:	d03e      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0xd8>
 8002a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a6e:	f200 8087 	bhi.w	8002b80 <HAL_TIM_ConfigClockSource+0x170>
 8002a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a76:	f000 8086 	beq.w	8002b86 <HAL_TIM_ConfigClockSource+0x176>
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a7e:	d87f      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x170>
 8002a80:	2b70      	cmp	r3, #112	@ 0x70
 8002a82:	d01a      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0xaa>
 8002a84:	2b70      	cmp	r3, #112	@ 0x70
 8002a86:	d87b      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x170>
 8002a88:	2b60      	cmp	r3, #96	@ 0x60
 8002a8a:	d050      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0x11e>
 8002a8c:	2b60      	cmp	r3, #96	@ 0x60
 8002a8e:	d877      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x170>
 8002a90:	2b50      	cmp	r3, #80	@ 0x50
 8002a92:	d03c      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0xfe>
 8002a94:	2b50      	cmp	r3, #80	@ 0x50
 8002a96:	d873      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x170>
 8002a98:	2b40      	cmp	r3, #64	@ 0x40
 8002a9a:	d058      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0x13e>
 8002a9c:	2b40      	cmp	r3, #64	@ 0x40
 8002a9e:	d86f      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x170>
 8002aa0:	2b30      	cmp	r3, #48	@ 0x30
 8002aa2:	d064      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x15e>
 8002aa4:	2b30      	cmp	r3, #48	@ 0x30
 8002aa6:	d86b      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x170>
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d060      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x15e>
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d867      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x170>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d05c      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x15e>
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d05a      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x15e>
 8002ab8:	e062      	b.n	8002b80 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aca:	f000 f969 	bl	8002da0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002adc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	609a      	str	r2, [r3, #8]
      break;
 8002ae6:	e04f      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002af8:	f000 f952 	bl	8002da0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b0a:	609a      	str	r2, [r3, #8]
      break;
 8002b0c:	e03c      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f000 f8c6 	bl	8002cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2150      	movs	r1, #80	@ 0x50
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f91f 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b2c:	e02c      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f000 f8e5 	bl	8002d0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2160      	movs	r1, #96	@ 0x60
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f90f 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b4c:	e01c      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f000 f8a6 	bl	8002cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2140      	movs	r1, #64	@ 0x40
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 f8ff 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b6c:	e00c      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f000 f8f6 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b7e:	e003      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
      break;
 8002b84:	e000      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002b86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a38      	ldr	r2, [pc, #224]	@ (8002c98 <TIM_Base_SetConfig+0xf4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <TIM_Base_SetConfig+0x28>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0x28>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a35      	ldr	r2, [pc, #212]	@ (8002c9c <TIM_Base_SetConfig+0xf8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d108      	bne.n	8002bde <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a2d      	ldr	r2, [pc, #180]	@ (8002c98 <TIM_Base_SetConfig+0xf4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <TIM_Base_SetConfig+0x6a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bec:	d00f      	beq.n	8002c0e <TIM_Base_SetConfig+0x6a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c9c <TIM_Base_SetConfig+0xf8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00b      	beq.n	8002c0e <TIM_Base_SetConfig+0x6a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a29      	ldr	r2, [pc, #164]	@ (8002ca0 <TIM_Base_SetConfig+0xfc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <TIM_Base_SetConfig+0x6a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a28      	ldr	r2, [pc, #160]	@ (8002ca4 <TIM_Base_SetConfig+0x100>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d003      	beq.n	8002c0e <TIM_Base_SetConfig+0x6a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a27      	ldr	r2, [pc, #156]	@ (8002ca8 <TIM_Base_SetConfig+0x104>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a14      	ldr	r2, [pc, #80]	@ (8002c98 <TIM_Base_SetConfig+0xf4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00b      	beq.n	8002c64 <TIM_Base_SetConfig+0xc0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <TIM_Base_SetConfig+0xfc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <TIM_Base_SetConfig+0xc0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a13      	ldr	r2, [pc, #76]	@ (8002ca4 <TIM_Base_SetConfig+0x100>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <TIM_Base_SetConfig+0xc0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ca8 <TIM_Base_SetConfig+0x104>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d103      	bne.n	8002c6c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f023 0201 	bic.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	611a      	str	r2, [r3, #16]
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40014000 	.word	0x40014000
 8002ca4:	40014400 	.word	0x40014400
 8002ca8:	40014800 	.word	0x40014800

08002cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f023 0201 	bic.w	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f023 030a 	bic.w	r3, r3, #10
 8002ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	621a      	str	r2, [r3, #32]
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b087      	sub	sp, #28
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f023 0210 	bic.w	r2, r3, #16
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	031b      	lsls	r3, r3, #12
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	621a      	str	r2, [r3, #32]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f043 0307 	orr.w	r3, r3, #7
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	021a      	lsls	r2, r3, #8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e054      	b.n	8002ea2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a24      	ldr	r2, [pc, #144]	@ (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d108      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002e28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a17      	ldr	r2, [pc, #92]	@ (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00e      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e60:	d009      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a13      	ldr	r2, [pc, #76]	@ (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a11      	ldr	r2, [pc, #68]	@ (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10c      	bne.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40014000 	.word	0x40014000

08002ebc <memset>:
 8002ebc:	4402      	add	r2, r0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <__libc_init_array>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	4d0d      	ldr	r5, [pc, #52]	@ (8002f04 <__libc_init_array+0x38>)
 8002ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8002f08 <__libc_init_array+0x3c>)
 8002ed2:	1b64      	subs	r4, r4, r5
 8002ed4:	10a4      	asrs	r4, r4, #2
 8002ed6:	2600      	movs	r6, #0
 8002ed8:	42a6      	cmp	r6, r4
 8002eda:	d109      	bne.n	8002ef0 <__libc_init_array+0x24>
 8002edc:	4d0b      	ldr	r5, [pc, #44]	@ (8002f0c <__libc_init_array+0x40>)
 8002ede:	4c0c      	ldr	r4, [pc, #48]	@ (8002f10 <__libc_init_array+0x44>)
 8002ee0:	f000 f818 	bl	8002f14 <_init>
 8002ee4:	1b64      	subs	r4, r4, r5
 8002ee6:	10a4      	asrs	r4, r4, #2
 8002ee8:	2600      	movs	r6, #0
 8002eea:	42a6      	cmp	r6, r4
 8002eec:	d105      	bne.n	8002efa <__libc_init_array+0x2e>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef4:	4798      	blx	r3
 8002ef6:	3601      	adds	r6, #1
 8002ef8:	e7ee      	b.n	8002ed8 <__libc_init_array+0xc>
 8002efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efe:	4798      	blx	r3
 8002f00:	3601      	adds	r6, #1
 8002f02:	e7f2      	b.n	8002eea <__libc_init_array+0x1e>
 8002f04:	08002f5c 	.word	0x08002f5c
 8002f08:	08002f5c 	.word	0x08002f5c
 8002f0c:	08002f5c 	.word	0x08002f5c
 8002f10:	08002f60 	.word	0x08002f60

08002f14 <_init>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr

08002f20 <_fini>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr
